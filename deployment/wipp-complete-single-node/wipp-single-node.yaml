# PVC for WIPP-plugins
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wipp-pv-claim
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wipp-backend-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: wipp-backend-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "patch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "watch"]
  - apiGroups: ["argoproj.io"]
    resources: ["workflows"]
    verbs: ["delete", "deletecollection", "get", "list", "patch", "create", "update", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: wipp-backend-rb
subjects:
  - kind: ServiceAccount
    name: wipp-backend-sa
roleRef:
  kind: Role
  name: wipp-backend-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wipp-backend
spec:
  selector:
    matchLabels:
      app: wipp-backend
  replicas: 1
  template:
    metadata:
      labels:
        app: wipp-backend
    spec:
      serviceAccountName: wipp-backend-sa
      containers:
        - image: wipp/wipp-backend:3.1.0-RC1
          name: wipp-backend
          imagePullPolicy: Always
          args: ["wipp-mongo", "27017", "wipp-pv-claim"]
          env:
            - name: KEYCLOAK_AUTH_URL
              value: "http://localhost:32006/auth"
            - name: KEYCLOAK_SSL_REQUIRED
              value: "external"
            - name: KEYCLOAK_DISABLE_TRUST_MANAGER
              value: "false"
          volumeMounts:
            - mountPath: /data/WIPP-plugins
              name: data
          ports:
            - containerPort: 8080
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: wipp-pv-claim
      restartPolicy: Always
---
# WIPP-Backend Service
apiVersion: v1
kind: Service
metadata:
  name: wipp-backend
spec:
  type: NodePort
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8080
  selector:
    app: wipp-backend
---
# WIPP Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wipp-frontend
spec:
  selector:
    matchLabels:
      app: wipp-frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: wipp-frontend
    spec:
      containers:
      - image: wipp/wipp-frontend:3.1.0-RC1
        name: wipp-frontend
        imagePullPolicy: Always
        args: ["wipp-backend", "8080"]
        env:
        - name: ARGOUIBASE_URL
          value: "http://localhost:32002/workflows/default"
        - name: JUPYTERHUB_URL
          value: ""
        - name: VISIONUI_URL
          value: ""
        - name: TENSORBOARD_URL
          value: "http://localhost:32005"
        - name: KEYCLOAK_URL
          value: "http://localhost:32006/auth"
        ports:
        - containerPort: 80
      restartPolicy: Always
---
# WIPP Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: wipp-frontend
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    nodePort: 32001
    protocol: TCP
    targetPort: 80
  selector:
    app: wipp-frontend
---
# PVC for MongoDB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pv-claim
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
# WIPP MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - image: mongo:3.6
        name: mongodb
        volumeMounts:
        - mountPath: /data/db
          name: dbdata
          subPath: db
        ports:
        - containerPort: 27017
      volumes:
      - name: dbdata
        persistentVolumeClaim:
          claimName: mongo-pv-claim
      restartPolicy: Always
---
# WIPP MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: wipp-mongo
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb
---
# PVC for Postgres
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      name: postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: keycloak
        - name: POSTGRES_PASSWORD
          value: password
        - name: POSTGRES_USER
          value: keycloak
        image: postgres:12
        name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-data
        ports:
        - containerPort: 5432
        readinessProbe:
          exec:
            command:
            - psql
            - -U
            - keycloak
            - -c
            - SELECT 1
          initialDelaySeconds: 15
          timeoutSeconds: 2
        resources: {}
      restartPolicy: Always
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pv-claim
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: postgres
  name: postgres
spec:
  ports:
  - name: "5432"
    port: 5432
    protocol: TCP
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wipp-keycloak
  labels:
    app: wipp-keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wipp-keycloak
  template:
    metadata:
      labels:
        app: wipp-keycloak
    spec:
      containers:
      - args:
        - -b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/wipp-realm.json
        env:
        - name: DB_ADDR
          value: "postgres"
        - name: DB_DATABASE
          value: "keycloak"
        - name: DB_PASSWORD
          value: "password"
        - name: DB_SCHEMA
          value: "public"
        - name: DB_USER
          value: "keycloak"
        - name: DB_VENDOR
          value: "POSTGRES"
        - name: KEYCLOAK_PASSWORD
          value: "admin"
        - name: KEYCLOAK_USER
          value: "admin"
        - name:  PROXY_ADDRESS_FORWARDING
          value: "true"
        image: quay.io/keycloak/keycloak:11.0.2
        name: keycloak
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        readinessProbe:
          httpGet:
            path: /auth/realms/master
            port: 8080
        volumeMounts:
        - mountPath: "/opt/jboss/keycloak/imports/"
          name: wipp-realm
          readOnly: true
      restartPolicy: Always
      volumes:
      - name: wipp-realm
        secret:
          secretName: wipp-realm-secret
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: wipp-keycloak
  labels:
    app: wipp-keycloak
spec:
  type: NodePort
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    nodePort: 32006
  selector:
    app: wipp-keycloak
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Namespace
metadata:
  name: argo
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: workflows.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Workflow
    plural: workflows
    shortNames:
    - wf
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo
  namespace: argo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-ui
  namespace: argo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: argo-aggregate-to-admin
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: argo-aggregate-to-edit
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: argo-aggregate-to-view
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-ui-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-cluster-role
subjects:
- kind: ServiceAccount
  name: argo
  namespace: argo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-ui-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-ui-cluster-role
subjects:
- kind: ServiceAccount
  name: argo-ui
  namespace: argo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  namespace: argo
---
apiVersion: v1
kind: Service
metadata:
  name: argo-ui
  namespace: argo
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 32002
    targetPort: 8001
  selector:
    app: argo-ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-ui
  namespace: argo
spec:
  selector:
    matchLabels:
      app: argo-ui
  template:
    metadata:
      labels:
        app: argo-ui
    spec:
      containers:
      - env:
        - name: ARGO_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: IN_CLUSTER
          value: "true"
        - name: ENABLE_WEB_CONSOLE
          value: "false"
        - name: BASE_HREF
          value: /
        image: argoproj/argoui:v2.3.0
        name: argo-ui
      serviceAccountName: argo-ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-controller
  namespace: argo
spec:
  selector:
    matchLabels:
      app: workflow-controller
  template:
    metadata:
      labels:
        app: workflow-controller
    spec:
      containers:
      - args:
        - --configmap
        - workflow-controller-configmap
        - --executor-image
        - argoproj/argoexec:v2.3.0
        command:
        - workflow-controller
        image: argoproj/workflow-controller:v2.3.0
        name: workflow-controller
      serviceAccountName: argo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-user-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-user-role
rules:
  - apiGroups: ["argoproj.io"]
    resources: ["workflows"]
    verbs: ["delete", "deletecollection", "get", "list", "patch", "create", "update", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-user-rb
subjects:
  - kind: ServiceAccount
    namespace: default
    name: argo-user-sa
roleRef:
  kind: Role
  name: argo-user-role
  apiGroup: rbac.authorization.k8s.io
---
# WIPP-Tensorboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wipp-tensorboard
spec:
  selector:
    matchLabels:
      app: wipp-tensorboard
  replicas: 1
  template:
    metadata:
      labels:
        app: wipp-tensorboard
    spec:
      containers:
      - image: tensorflow/tensorflow:2.10.0
        name: wipp-tensorboard
        command: ["tensorboard"]
        args: ["--logdir=/data/WIPP-plugins/tensorboard-logs", "--host", "0.0.0.0"]
        volumeMounts:
        - mountPath: /data/WIPP-plugins
          name: data
          readOnly: true
        ports:
        - containerPort: 6006
        resources: {}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: wipp-pv-claim
      restartPolicy: Always
---
# WIPP-Tensorboard Service
apiVersion: v1
kind: Service
metadata:
  name: wipp-tensorboard
spec:
  type: NodePort
  ports:
  - name: "6006"
    port: 6006
    targetPort: 6006
    nodePort: 32005
  selector:
    app: wipp-tensorboard
---
